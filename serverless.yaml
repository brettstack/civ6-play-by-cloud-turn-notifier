service: civ6-pbc${{env:SERVERLESS_SERVICE_SUFFIX, ''}}
provider:
  name: aws
  stackName: ${{self:service}}-${{self:provider.stage}}
  runtime: nodejs12.x
  memorySize: 1024
  timeout: 6
  logRetentionInDays: ${{self:custom.stageConfig.logRetentionInDays}}
  stage: ${{opt:stage, env:NODE_ENV, 'development'}}
  profile: ${{self:custom.stageConfig.profile}}
  region: us-west-2
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._@\\'\",\\-\\/\\(\\)]+?)}}"
  logs:
    restApi:
      format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      level: INFO # TODO: add custom field for setting this; default to ERROR for prod
  environment:
    USER_TABLE: !Ref UserTable
    GAME_TABLE: !Ref GameTable

    # Enable connection reuse for AWS SDK for instant performance boost
    # https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

package:
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-apigateway-service-proxy
  # - serverless-plugin-split-stacks
  - serverless-stack-output
  - serverless-cloudside-plugin
  - serverless-plugin-aws-alerts
  - serverless-plugin-metric
  - './serverless-amplify-plugin'
  # - '@wizeline/serverless-amplify-plugin'
  - serverless-offline
  - serverless-stack-termination-protection

custom:
  stages:
    development:
      profile: civ6-pbc_dev
      logRetentionInDays: 1
      amplify:
      api:
        domainEnabled: false
      alarms:
        notificationEmail: ${{env:ALARMS_NOTIFICATION_EMAIL}}
    staging:
      profile: civ6-pbc_staging
      logRetentionInDays: 3
      isDomainRoute53: false
      api:
        domainEnabled: true
        domainName: staging.api.civ.halfstack.software
        # validationDomain: halfstack.software
      amplify:
        domainName: staging.civ.halfstack.software
      alarms:
        notificationEmail: alerts@halfstack.software
    production:
      profile: civ6-pbc_prod
      logRetentionInDays: 14
      # retainDataResources: true
      pointInTimeRecoveryEnabled: true
      isDomainRoute53: false
      api:
        domainEnabled: true
        domainName: api.civ.halfstack.software
        # validationDomain: halfstack.software
      amplify:
        domainName: civ.halfstack.software
      alarms:
        notificationEmail: alerts@halfstack.software
  stageConfig: ${{self:custom.stages.${{self:provider.stage}}}}
  prune:
    automatic: true
    number: 10
  customDomain:
    domainName: ${{self:custom.stageConfig.api.domainName, ''}}
    certificateName: ${{self:custom.stageConfig.api.domainName, ''}}
    # enabled: false
    enabled: ${{self:custom.stageConfig.api.domainEnabled, false}}
    autoDomain: true #${{self:custom.stageConfig.api.domainEnabled, false}}
    createRoute53Record: ${{self:custom.stageConfig.api.isDomainRoute53, false}}
  serverless-offline:
    httpPort: 4911
    noPrependStageInUrl: true
    useChildProcesses: true # hack to get watching working
    useSeparateProcesses: true
  amplify:
    isManual: true
    domainName: ${{self:custom.stageConfig.amplify.domainName, ''}}
    buildSpecValues:
      artifactBaseDirectory: packages/ui/build
      preBuildWorkingDirectory: packages/ui
    buildCommandEnvVars:
      prefix: 'REACT_APP_'
      allow:
        - ApiEndpoint
        - CognitoIdentityPoolId,
        - CognitoUserPoolId,
        - CognitoUserPoolClientId,
  # dotenv:
  #   path: ../../.env
  # amplify:
  #   accessTokenSecretName: AmplifyGithub3
  #   repository: https://github.com/brettstack/civ6-play-by-cloud-turn-notifier
  #   branch: ${{self:custom.stageConfig.branch}}
  #   domainName: ${{self:custom.stageConfig.domainName, ''}}
  #   buildSpecValues:
  #     artifactBaseDirectory: packages/ui/build
  #     preBuildWorkingDirectory: packages/ui
  #   # TODO: update amplify-plugin to accept custom buildSpecValues.preBuild command so we don't have to set the entire buildSpec
  #   buildSpec: |-
  #     version: 0.1
  #     frontend:
  #       phases:
  #         preBuild:
  #           commands:
  #             - npm ci
  #             - cd packages/ui
  #             - npm ci
  #         build:
  #           commands:
  #             - npm run build
  #       artifacts:
  #         baseDirectory: packages/ui/build
  #         files:
  #           - '**/*'
  #       cache:
  #         paths:
  #           - node_modules/**/*
  webpack:
    webpackConfig: ./functions.webpack.config.js
  output:
    file: ./stack-outputs.${{self:provider.stage}}.json
  # TODO: Add custom splitting with ./split-stack-splitter.js
  # splitStacks:
  #   perFunction: true
  #   custom: ./split-stack-splitter.js
  alerts:
    dashboards: false
    nameTemplate: $[functionName]-$[metricName]-Alarm
    topics:
      alarm:
        topic: ${{self:service}}-${{self:provider.stage}}-alarm
        notifications:
          - protocol: email
            endpoint: ${{self:custom.stageConfig.alarms.notificationEmail}}
    # TODO: Add short and long alarms for each
    alarms:
      # - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration
    definitions:
      functionDuration:
        threshold: 1000
        evaluationPeriods: 5
      

  metrics:
    - name: SKIP_INACTIVE
      pattern: '{ $.message = "PROCESS_MESSAGE:SKIP_INACTIVE" }'
      functions: [webhook]
      namespace: ${{self:service}}
    - name: GAME_MARKED_INACTIVE
      pattern: '{ $.message = "PROCESS_MESSAGE:GAME_MARKED_INACTIVE" }'
      functions: [webhook]
      namespace: ${{self:service}}
    - name: NOTIFICATION_SENT
      pattern: '{ $.message = "PROCESS_MESSAGE:NOTIFICATION_SENT" }'
      functions: [webhook]
      namespace: ${{self:service}}

  serverlessTerminationProtection:
    stages:
      - staging
      - production

  apiGatewayServiceProxies:
    - sqs:
        path: /webhook
        method: post
        queueName: !GetAtt WebhookSqsQueue.QueueName
        requestParameters:
          integration.request.querystring.MessageAttribute.1.Name: "'gameId'"
          integration.request.querystring.MessageAttribute.1.Value.StringValue: method.request.querystring.gameId
          integration.request.querystring.MessageAttribute.1.Value.DataType: "'String'"
functions:
  webhook:
    reservedConcurrency: 1
    handler: packages/api/functions/webhook/lambda.webhookHandlerMiddy
    events:
      - sqs:
          arn: !GetAtt WebhookSqsQueue.Arn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: !GetAtt WebhookSqsQueueDlq.Arn
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt GameTable.Arn
          - !GetAtt UserTable.Arn

  express:
    handler: packages/api/functions/express/lambda.handler
    events:
        - http: ANY /
          cors: true
        - http: 'ANY {proxy+}'
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: "Allow"
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt GameTable.Arn
          - !GetAtt UserTable.Arn
      # - Effect: Allow
      #   Action:
      #     - logs:CreateLogGroup
      #     - logs:CreateLogStream
      #     - logs:PutLogEvents
      #   Resource:
      #     - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${{self:provider.stackName}}-express:*:*

  autoConfirmUser:
    handler: packages/api/functions/cognito/auto-confirm-user.handler

  postAuthN:
    handler: packages/api/functions/cognito/post-authentication.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource:
          - !GetAtt UserTable.Arn
    
resources:
  Conditions:
    IsApiCustomDomainEnabled:
      !Equals
        - ${{self:custom.stageConfig.api.domainEnabled, false}}
        - true
    # RetainDataResources:
    #   !Equals
    #     - ${{self:custom.stageConfig.retainDataResources, false}}
    #     - true
  
  Resources:
    # NOTE: Following guidance here to reduce the chance of Lambda throttling
    # https://medium.com/@zaccharles/lambda-concurrency-limits-and-sqs-triggers-dont-mix-well-sometimes-eb23d90122e0
    WebhookSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        VisibilityTimeout: 36 # functions.webhook.timeout * 6
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt WebhookSqsQueueDlq.Arn
          maxReceiveCount: 5

    WebhookSqsQueueDlq:
      Type: AWS::SQS::Queue
    
    ApiGatewayMethodWebhookPost:
      Type: AWS::ApiGateway::Method
      Properties:
        RequestParameters:
          method.request.querystring.gameId: true
        Integration:
          IntegrationResponses:
            - StatusCode: 200
              ResponseTemplates:
                application/json: '{}'

    # NOTE: This only works when deploying to us-east-1 since ACM certs for EDGE APIs
    # must exist in us-east-1 due to being associated with a CloudFront Distribution.
    # Manually create cert in us-east-1 instead.
    # AcmCertificate:
    #   Type: AWS::CertificateManager::Certificate
    #   Condition: IsApiCustomDomainEnabled
    #   Properties:
    #     DomainName: ${{self:custom.stageConfig.api.domainName}}
    #     DomainValidationOptions:
    #       - DomainName: ${{self:custom.stageConfig.api.domainName}}
    #         ValidationDomain: ${{self:custom.stageConfig.api.validationDomain, ''}}

    GameTable:
        Type: AWS::DynamoDB::Table
        # DeletionPolicy: !If [RetainDataResources, 'Retain', 'Delete']
        Properties:
          BillingMode: PAY_PER_REQUEST
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: ${{self:custom.stageConfig.pointInTimeRecoveryEnabled, false}}
          KeySchema:
            - KeyType: HASH
              AttributeName: id
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S

    UserTable:
      Type: AWS::DynamoDB::Table
      # DeletionPolicy: !If [RetainDataResources, 'Retain', 'Delete']
      Properties:
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: false
        KeySchema:
          - KeyType: HASH
            AttributeName: id
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      # DeletionPolicy: !If [RetainDataResources, 'Retain', 'Delete']
      Properties:
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true
        AutoVerifiedAttributes:
          - email
        # EmailConfiguration:
        #   EmailSendingAccount: DEVELOPER
        #   ReplyToEmailAddress: no-reply@halfstack.software
        #   SourceArn: arn:aws:ses:us-west-2:xxxx:identity/no-reply@halfstack.software
        LambdaConfig:
          PreSignUp: !GetAtt AutoConfirmUserLambdaFunction.Arn
          PostAuthentication: !GetAtt PostAuthNLambdaFunction.Arn

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      # DeletionPolicy: !If [RetainDataResources, 'Retain', 'Delete']
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: CognitoIdentityPool
        GenerateSecret: false
        RefreshTokenValidity: 30

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      # DeletionPolicy: !If [RetainDataResources, 'Retain', 'Delete']
      Properties:
        AllowUnauthenticatedIdentities: false
        # SupportedLoginProviders:
        #   graph.facebook.com: 'xxxxx'
        #   accounts.google.com: 'xxxxx-v02jjpd5r9ig0pdacbhpill2asuqtvnf.apps.googleusercontent.com'
        #   api.twitter.com:
        CognitoIdentityProviders:
          - ClientId: !Ref CognitoUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName

    # Allow Cognito to invoke the cognitoAutoConfirm and cognitoPostAuthN functions
    AutoConfirmUserLambdaCognitoPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt AutoConfirmUserLambdaFunction.Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    PostAuthNLambdaCognitoPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt PostAuthNLambdaFunction.Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    CognitoUserRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            # Allow authenticated users to assume this role
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        # Authenticated users are allowed to invoke the API
        Policies:
          - PolicyName: InvokeApi
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${{self:provider.stage}}/*/*'
        Path: '/'

    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      # DeletionPolicy: !If [RetainDataResources, 'Retain', 'Delete']
      Properties:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
          authenticated: !GetAtt CognitoUserRole.Arn
    
    # Due to a Serverless Framework bug, we need to create our own Authorizer, instead of
    # simply specifying `authorizer.arn: !GetAtt CognitoUserPool.Arn` in the function.
    # https://github.com/serverless/serverless/issues/3212#issuecomment-450574093
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt CognitoUserPool.Arn

    Dashboard:
      Type: AWS::CloudWatch::Dashboard
      Properties:
        DashboardBody: !Sub |
          {
            "start": "-P10D",
            "end": "P0D",
            "widgets": [
              {
                  "type": "metric",
                  "x": 0,
                  "y": 0,
                  "width": 6,
                  "height": 6,
                  "properties": {
                      "metrics": [
                          [ "civ6-pbc", "webhook-GAME_MARKED_INACTIVE", { "label": "Games marked inactive" } ],
                          [ ".", "webhook-NOTIFICATION_SENT", { "label": "Notifications sent" } ],
                          [ ".", "webhook-SKIP_INACTIVE", { "label": "Inactive games skipped" } ],
                          [ "AWS/Lambda", "Errors", "FunctionName", "${WebhookLambdaFunction}", "Resource", "${WebhookLambdaFunction}" ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "stat": "Sum",
                      "period": 3600,
                      "title": "Webhook"
                  }
              },
              {
                "type": "metric",
                "x": 6,
                "y": 0,
                "width": 6,
                "height": 6,
                "properties": {
                  "metrics": [
                    [ "AWS/Lambda", "Duration", "FunctionName", "${WebhookLambdaFunction}", "Resource", "${WebhookLambdaFunction}", { "stat": "Minimum" } ],
                    [ ".",          ".",        { "stat": "Average" } ],
                    [ ".",          ".",        { "stat": "Maximum" } ]
                  ],
                  "region": "${AWS::Region}",
                  "title": "Webhook duration",
                  "view": "timeSeries",
                  "stacked": false,
                  "period": 3600
                }
              },
              {
                "type": "metric",
                "x": 12,
                "y": 0,
                "width": 6,
                "height": 6,
                "properties": {
                    "metrics": [
                      [ "AWS/SQS", "ApproximateNumberOfMessagesVisible", "QueueName", "${WebhookSqsQueueDlq.QueueName}", { "label": "Number of messages" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Maximum",
                    "period": 3600,
                    "title": "Webhook DLQ"
                }
              },
              {
                  "type": "alarm",
                  "x": 18,
                  "y": 0,
                  "width": 6,
                  "height": 6,
                  "properties": {
                      "title": "Alarms",
                      "alarms": [
                          "${WebhookFunctionErrorsAlarm.Arn}",
                          "${WebhookFunctionDurationAlarm.Arn}"
                      ]
                  }
              },
              {
                  "type": "metric",
                  "x": 0,
                  "y": 6,
                  "width": 15,
                  "height": 4,
                  "properties": {
                      "metrics": [
                          [ "civ6-pbc", "webhook-NOTIFICATION_SENT", { "label": "This month", "period": 2592000 } ],
                          [ "...", { "label": "This week", "period": 604800 } ],
                          [ "...", { "label": "Today", "period": 86400 } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "stat": "Sum",
                      "title": "Notifications sent",
                      "start": "-P12M",
                      "end": "P0D"
                  }
              },
              {
                  "type": "metric",
                  "x": 15,
                  "y": 6,
                  "width": 9,
                  "height": 3,
                  "properties": {
                      "metrics": [
                          [ "civ6-pbc", "webhook-NOTIFICATION_SENT", { "label": "This month", "period": 2592000 } ],
                          [ "...", { "label": "This week", "period": 604800 } ],
                          [ "...", { "label": "Today", "period": 86400 } ]
                      ],
                      "view": "singleValue",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "stat": "Sum",
                      "title": "Notifications sent",
                      "start": "-P12M",
                      "end": "P0D"
                  }
              },
              {
                  "type": "log",
                  "x": 0,
                  "y": 12,
                  "width": 24,
                  "height": 6,
                  "properties": {
                      "query": "SOURCE '/aws/lambda/${WebhookLambdaFunction}' | FIELDS @timestamp, @message\n| SORT @timestamp desc\n| FILTER @message LIKE /Invoke Error/ OR errorType = 'Error' OR level = 'error' | DISPLAY errorMessage",
                      "region": "${AWS::Region}",
                      "stacked": false,
                      "view": "table"
                  }
              },
              {
                "type": "explorer",
                "x": 0,
                "y": 18,
                "width": 24,
                "height": 15,
                "properties": {
                    "metrics": [
                        {
                            "metricName": "Duration",
                            "resourceType": "AWS::Lambda::Function",
                            "stat": "p90"
                        },
                        {
                            "metricName": "Errors",
                            "resourceType": "AWS::Lambda::Function",
                            "stat": "Sum"
                        },
                        {
                            "metricName": "Invocations",
                            "resourceType": "AWS::Lambda::Function",
                            "stat": "Sum"
                        },
                        {
                            "metricName": "Throttles",
                            "resourceType": "AWS::Lambda::Function",
                            "stat": "Sum"
                        }
                    ],
                    "labels": [
                        {
                          "key": "FunctionName",
                          "value": "${WebhookLambdaFunction}"
                        }
                    ],
                    "widgetOptions": {
                        "legend": {
                            "position": "bottom"
                        },
                        "view": "timeSeries",
                        "stacked": false,
                        "rowsPerPage": 50,
                        "widgetsPerRow": 2
                    },
                    "period": 3600,
                    "splitBy": "FunctionName"
                }
              }
            ]
          }

  Outputs:
    CognitoUserPoolId:
      Description: ID of the Cognito User Pool
      Value: !Ref CognitoUserPool

    CognitoUserPoolClientId:
      Description: 'Client ID of the Cognito User Pool App: Identity Pool'
      Value: !Ref CognitoUserPoolClient

    CognitoIdentityPoolId:
      Description: ID of the Cognito Identity Pool
      Value: !Ref CognitoIdentityPool

    UserTableName:
      Value: !Ref UserTable

    GameTableName:
      Value: !Ref GameTable

    ApiEndpoint:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${{self:provider.stage}}