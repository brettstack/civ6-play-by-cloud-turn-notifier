service: civ6-pbc-api
provider:
  name: aws
  stackName: ${{self:service}}-${{self:provider.stage}}
  runtime: nodejs12.x
  memorySize: 128
  timeout: 6
  stage: ${{opt:stage, self:custom.defaultStage}}
  profile: ${{self:custom.stages.${{self:provider.stage}}.profile}}
  region: us-east-1
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._@\\'\",\\-\\/\\(\\)]+?)}}"
  logs:
    restApi:
      format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      level: INFO # INFO, ERROR
  environment:
    IS_OFFLINE: ${{env:IS_OFFLINE}}

plugins:
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-apigateway-service-proxy
  - serverless-offline

custom:
  defaultStage: prod
  stages:
    dev:
      profile: civ6_dev
      domainEnabled: false
    staging:
      profile: civ6_staging
      domainName: staging.api.civ.halfstack.software
      validationDomain: halfstack.software
      domainEnabled: true
    prod:
      profile: civ6_prod
      domainName: api.civ.halfstack.software
      validationDomain: halfstack.software
      domainEnabled: true
  apiGatewayServiceProxies:
    - sqs:
        path: /webhook
        method: post
        queueName: !GetAtt WebhookSqsQueue.QueueName
        requestParameters:
          integration.request.querystring.MessageAttribute.1.Name: "'gameId'"
          integration.request.querystring.MessageAttribute.1.Value.StringValue: method.request.querystring.gameId
          integration.request.querystring.MessageAttribute.1.Value.DataType: "'String'"
  customDomain:
    domainName: ${{self:custom.stages.${{self:provider.stage}}.domainName}}
    certificateName: ${{self:custom.stages.${{self:provider.stage}}.domainName}}
    enabled: ${{self:custom.stages.${{self:provider.stage}}.domainEnabled}}
    createRoute53Record: false
  serverless-offline:
    httpPort: 4911
    noPrependStageInUrl: true
    useChildProcesses: true # hack to get watching working
    useSeparateProcesses: true

functions:
  webhook:
    reservedConcurrency: 1
    handler: functions/webhook/lambda.webhookHandler
    events:
      - sqs:
          arn: !GetAtt WebhookSqsQueue.Arn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: !GetAtt WebhookSqsQueueDlq.Arn
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Game
      # - Effect: Allow
      #   Action:
      #     - logs:CreateLogGroup
      #     - logs:CreateLogStream
      #     - logs:PutLogEvents
      #   Resource:
      #     - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${{self:provider.stackName}}-webhook:*:*
  express:
    handler: functions/express/lambda.handler
    events:
        - http: ANY /
          cors: true
        - http: 'ANY {proxy+}'
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: "Allow"
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:UpdateItem
        Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Game
      # - Effect: Allow
      #   Action:
      #     - logs:CreateLogGroup
      #     - logs:CreateLogStream
      #     - logs:PutLogEvents
      #   Resource:
      #     - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${{self:provider.stackName}}-express:*:*

resources:
  Conditions:
    UseDomainName:
      !Equals
        - ${{self:custom.customDomain.enabled}}
        - true
  
  Resources:
    # NOTE: Following guidance here to reduce the chance of Lambda throttling
    # https://medium.com/@zaccharles/lambda-concurrency-limits-and-sqs-triggers-dont-mix-well-sometimes-eb23d90122e0
    WebhookSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        VisibilityTimeout: 36 # functions.webhook.timeout * 6
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt WebhookSqsQueueDlq.Arn
          maxReceiveCount: 5

    WebhookSqsQueueDlq:
      Type: AWS::SQS::Queue
    
    ApiGatewayMethodWebhookPost:
      Type: AWS::ApiGateway::Method
      Properties:
        RequestParameters:
          method.request.querystring.gameId: true
        Integration:
          IntegrationResponses:
            - StatusCode: 200
              ResponseTemplates:
                application/json: '{}'

    AcmCertificate:
      Type: AWS::CertificateManager::Certificate
      Condition: UseDomainName
      Properties:
        DomainName: ${{self:custom.customDomain.domainName}}
        DomainValidationOptions:
          - DomainName: ${{self:custom.customDomain.domainName}}
            ValidationDomain: ${{self:custom.stages.${{self:provider.stage}}.validationDomain}}

    Dashboard:
      Type: AWS::CloudWatch::Dashboard
      Properties:
        Foo: !Sub |
          {
          "metrics": [
            [ "AWS/Lambda", "Invocations", "FunctionName", "${WebhookLambdaFuncion}", "Resource", "${WebhookLambdaFuncion}" ]
          ],
          "region": ${AWS::Region},
          "title": "Send notifications (# invokes)",
          "view": "timeSeries",
          "stacked": false,
          "stat": "Sum",
          "period": 86400
          }